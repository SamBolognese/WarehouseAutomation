@page "/Customers"
@using WarehouseAutomation.Data;
@using WarehouseAutomation.Data.Interfaces;

@inject IProductRepository ProductRepository
@inject ICustomerRepository CustomerRepository
@inject IOrderRepository OrderRepository
@inject NavigationManager NavManager

<h2>Customers</h2>
<div class="container-fluid">
    <div class="row bg-light">
        <table class="table table-bordered table-striped table-hover">
            <thead class="thead-light">
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Phone</th>
                    <th>Email</th>
                    <th>Orders</th>
                    <th>Delete customer</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var customer in customers)
                {
                    <tr @onclick="(() => SetCustomerForUpdates(customer))">
                        <td>@customer.Id</td>
                        <td>@customer.Name</td>
                        <td>@customer.Phone</td>
                        <td>@customer.Email</td>
                        <td><button class="btn btn-outline-info" @onclick="(() => OrderViewNavigation(customer))">Show orders</button></td>
                        <td><button class="btn btn-danger" @onclick="(() => DeleteCustomer(customer))">Delete customer</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class='card p-3 bg-light m-2'>
        <EditForm Model="@newCustomer" OnValidSubmit="(() => AddCustomer(newCustomer))">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="name">Customer name</label>
                <input @bind-value="@newCustomer.Name" type="text" />
            </div>
            <div class="form-group">
                <label for="phone">Phone number</label>
                <input @bind-value="@newCustomer.Phone" type="text" />
            </div>
            <div class="form-group">
                <label for="email">Email</label>
                <input @bind-value="@newCustomer.Email" type="text" />
            </div>
            <button class="btn btn-info" type="submit">Add customer</button>
        </EditForm>
    </div>
    <div class='card p-3 bg-light m-2'>
        <EditForm Model="@updatedCustomer" OnValidSubmit="(() => UpdateCustomer(updatedCustomer))">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="name">Customer name</label>
                <input @bind-value="@updatedCustomer.Name" type="text" />
            </div>
            <div class="form-group">
                <label for="phone">Phone number</label>
                <input @bind-value="@updatedCustomer.Phone" type="text" />
            </div>
            <div class="form-group">
                <label for="Email">Email</label>
                <input @bind-value="@updatedCustomer.Email" type="text" />
            </div>
            <button class="btn btn-info" type="submit">Update customer</button>
        </EditForm>
    </div>
</div>

@code
{
    List<Customer> customers;

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerRepository.GetAllAsync() as List<Customer>;
    }

    Customer newCustomer = new Customer();
    Customer updatedCustomer = new Customer();

    private async Task AddCustomer(Customer customer)
    {
        await CustomerRepository.AddAsync(customer);
        newCustomer = new Customer();
        await GuiUpdate();
    }

    private void SetCustomerForUpdates(Customer selected)
    {
        updatedCustomer = selected;
    }

    private async Task UpdateCustomer(Customer customer)
    {
        await CustomerRepository.UpdateAsync(customer);
    }

    private async Task DeleteCustomer(Customer customer)
    {
        await CustomerRepository.RemoveAsync(customer);
        await GuiUpdate();
    }
    private async Task GuiUpdate()
    {
        await OnInitializedAsync();
    }

    private void OrderViewNavigation(Customer customer)
    {
        NavManager.NavigateTo($"/OrderView/{customer.Id}");
    }
}
