@page "/"
@using WarehouseAutomation.Data;
@using WarehouseAutomation.Data.Interfaces;

@inject IProductRepository ProductRepository
@inject ICustomerRepository CustomerRepository
@inject IOrderRepository OrderRepository
@inject IOrderLineRepository OrderLineRepository
@inject NavigationManager NavManager

<h2>Orders</h2>
<div class="container-fluid">
    <h3>Dispatched orders</h3>
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-light">
                <tr>
                    <th>Id</th>
                    <th>Customer Id</th>
                    <th>Delivery address</th>
                    <th>Payment status</th>
                    <th>Dispatch status</th>
                    <th>Order date</th>
                    <th>Products</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in ordersDispatched)
                {
                    <tr>
                        <td>@order.Id</td>
                        <td>@order.CustomerId</td>
                        <td>@order.DeliveryAddress</td>
                        <td>@PaymentStatus(order.PaymentCompleted)</td>
                        <td>@DispatchedStatus(order.Dispatched)</td>
                        <td>@order.OrderDate.</td>
                        <td><button class="btn btn-outline-info" @onclick="(() => OrderedlinesViewNavigation(order))">Show products</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <h3>Pending orders</h3>
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-light">
                <tr>
                    <th>Id</th>
                    <th>Customer Id</th>
                    <th>Customer Name</th>
                    <th>Delivery address</th>
                    <th>Payment status</th>
                    <th>Dispatch status</th>
                    <th>Order date</th>
                    <th>Earliest dispatch date</th>
                    <th>Products</th>
                    <th>Remove Order</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in ordersNotDispatched)
                {
                    <tr @onclick="(() => SetOrderForUpdates(order))">
                        <td>@order.Id</td>
                        <td>@order.CustomerId</td>
                        <td>@order.Customer.Name</td>
                        <td>@order.DeliveryAddress</td>
                        <td>@PaymentStatus(order.PaymentCompleted)</td>
                        <td>@DispatchedStatus(order.Dispatched)</td>
                        <td>@order.OrderDate.</td>
                        <td>@EarliestDispatch(order)</td>
                        <td><button class="btn btn-outline-info" @onclick="(() => OrderlineViewNavigation(order))">Show products</button></td>
                        <td><button class="btn btn-danger" @onclick="(() => DeleteOrder(order))">Remove order</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <button class="btn btn-outline-danger" @onclick="(() => ProcessOrders())">Process Orders</button>

    <EditForm Model="@newOrder" OnValidSubmit="(() => AddOrder(newOrder))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="name">Customer ID</label>
            <input @bind-value="@newOrder.CustomerId" type="text" />
        </div>
        <div class="form-group">
            <label for="address">Delivery address</label>
            <input @bind-value="@newOrder.DeliveryAddress" type="text" />
        </div>
        <button class="btn btn-info" type="submit">Add order</button>
    </EditForm>

    <EditForm Model="@updatedOrder" OnValidSubmit="(() => UpdateOrder(updatedOrder))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="address">Delivery address</label>
            <input @bind-value="@updatedOrder.DeliveryAddress" type="text" />
        </div>
        <div class="form-group">
            <button class="btn btn-light" type="button" @onclick="(() => PayOrder(updatedOrder))">Pay order</button>
        </div>
        <button class="btn btn-info" type="submit">Update order</button>
    </EditForm>
</div>

@code
{
    List<Order> orders;
    List<Order> ordersDispatched;
    List<Order> ordersNotDispatched;

    protected override async Task OnInitializedAsync()
    {
        await OrderLineRepository.GetAllAsync();
        await CustomerRepository.GetAllAsync();
        orders = await OrderRepository.GetAllAsync() as List<Order>;
        ordersDispatched = await OrderRepository.GetDispatchedOrdersAsync() as List<Order>;
        ordersNotDispatched = await OrderRepository.GetPendingOrdersAsync() as List<Order>;
        newOrder = new Order();
    }

    Order newOrder = new Order();
    Order updatedOrder = new Order();

    private async Task AddOrder(Order order)
    {
        order.OrderDate = DateTime.Now;
        order.PaymentCompleted = false;
        await OrderRepository.AddAsync(order);
        OrderLineCreatorNavigation(newOrder);
        await GuiUpdate();

    }

    private void SetOrderForUpdates(Order selected)
    {
        updatedOrder = selected;
    }

    private void UpdateOrder(Order order)
    {
        OrderRepository.UpdateAsync(order);
        updatedOrder = new Order();
    }

    private async Task PayOrder(Order order)
    {
        await OrderRepository.PayOrderAsync(order);
        await GuiUpdate();
    }

    private async Task DeleteOrder(Order order)
    {
        await OrderRepository.RemoveAsync(order);
        await GuiUpdate();
    }

    private async Task ProcessOrders()
    {
        foreach (Order order in ordersNotDispatched)
        {
            if (order.PaymentCompleted && ProductRepository.ItemInStock(order).Result)
            {
                await ProductRepository.UpdateStockAsync(order);
                await OrderRepository.UpdateDispatchStatusAsync(order);
            }
        }
        await GuiUpdate();
    }

    private async Task GuiUpdate()
    {
        await OnInitializedAsync();
    }

    private void OrderLineCreatorNavigation(Order order)
    {
        NavManager.NavigateTo($"/OrderLineCreator/{order.Id}");
    }

    private void OrderedlinesViewNavigation(Order order)
    {
        NavManager.NavigateTo($"/OrderedLinesView/{order.Id}");
    }

    private void OrderlineViewNavigation(Order order)
    {
        NavManager.NavigateTo($"/OrderLineView/{order.Id}");
    }

    private string PaymentStatus(bool status)
    {
        if (status == true)
        {
            return "Paid";
        }
        else return "Not paid";
    }
    private string DispatchedStatus(bool dispatched)
    {
        if (dispatched == true)
        {
            return "Dispatched";
        }
        else return "Not dispatched";
    }
    private DateTime EarliestDispatch(Order order)
    {

        if (ProductRepository.ItemInStock(order).Result)
        {
            return DateTime.Now;
        }
        else return DateTime.Now.AddDays(10);
    }
}



