@page "/"
@using WarehouseAutomation.Data;
@using WarehouseAutomation.Data.Interfaces;

@inject IProductRepository ProductRepository
@inject ICustomerRepository CustomerRepository
@inject IOrderRepository OrderRepository
@inject NavigationManager NavManager

<h2>Orders</h2>
<div class="container-fluid">
    <h3>Dispatched orders</h3>
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-light">
                <tr>
                    <th>Id</th>
                    <th>Customer Id</th>
                    <th>Delivery address</th>
                    <th>Payment status</th>
                    <th>Dispatch status</th>
                    <th>Order date</th>
                    <th>Products</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in ordersDispatched)
                {
                    <tr>
                        <td>@order.Id</td>
                        <td>@order.CustomerId</td>
                        <td>@order.DeliveryAddress</td>
                        <td>@order.PaymentCompleted</td>
                        <td>@order.Dispatched</td>
                        <td>@order.OrderDate.</td>
                        <td><button class="btn btn-outline-info">Show products</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <h3>Pending orders</h3>
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-light">
                <tr>
                    <th>Id</th>
                    <th>Customer Id</th>
                    <th>Delivery address</th>
                    <th>Payment status</th>
                    <th>Dispatch status</th>
                    <th>Order date</th>
                    <th>Products</th>
                    <th>Remove Order</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in ordersNotDispatched)
                {
                    <tr @onclick="(() => SetOrderForUpdates(order))">
                        <td>@order.Id</td>
                        <td>@order.CustomerId</td>
                        <td>@order.DeliveryAddress</td>
                        <td>@order.PaymentCompleted</td>
                        <td>@order.Dispatched</td>
                        <td>@order.OrderDate.</td>
                        <td><button class="btn btn-outline-info">Show products</button></td>
                        <td><button class="btn btn-danger" @onclick="(() => DeleteOrder(order))">Remove order</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <button class="btn btn-info" @onclick=@(() => OrderNavigation())>Add order</button>

    <button class="btn btn-info" @onclick=@(() => OrderNavigation())>Update order</button>

    <button class="btn btn-info" @onclick="(() => ProcessOrders())">Process Orders</button>
</div>

@code
{
    List<Order> orders;
    List<Order> ordersDispatched;
    List<Order> ordersNotDispatched;

    protected override async Task OnInitializedAsync()
    {
        orders = await OrderRepository.GetAllAsync() as List<Order>;
        ordersDispatched = await OrderRepository.GetDispatchedOrdersAsync() as List<Order>;
        ordersNotDispatched = await OrderRepository.GetPendingOrdersAsync() as List<Order>;
    }

    Order newOrder = new Order();
    Order updatedOrder = new Order();

    private async Task AddOrder(Order order)
    {
        await OrderRepository.AddAsync(order);
        newOrder = new Order();
        await GuiUpdate();
    }

    private void SetOrderForUpdates(Order selected)
    {
        updatedOrder = selected;
    }

    private void UpdateOrder(Order order)
    {
        OrderRepository.UpdateAsync(order);
        updatedOrder = new Order();
    }

    private async Task DeleteOrder(Order order)
    {
        await OrderRepository.RemoveAsync(order);
        await GuiUpdate();
    }

    private void ProcessOrders()
    {
        foreach (Order order in ordersNotDispatched)
        {
            if (OrderRepository.ItemsInStockAsync(order).Result)
            {
                ProductRepository.UpdateStockAsync(order);
                OrderRepository.UpdateDispatchStatusAsync(order);
            }
        }
    }

    private async Task GuiUpdate()
    {
        await OnInitializedAsync();
    }

    private void OrderNavigation()
    {
        NavManager.NavigateTo("/OrderLineCreator");

    }
}



