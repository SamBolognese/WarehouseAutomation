@page "/"
@using WarehouseAutomation.Data;
@using WarehouseAutomation.Data.Interfaces;

@inject IProductRepository ProductRepository
@inject ICustomerRepository CustomerRepository
@inject IOrderRepository OrderRepository

<h2>Orders</h2>
<div class="container-fluid">
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-light">
                <tr>
                    <th>Id</th>
                    <th>Customer Id</th>
                    <th>Delivery address</th>
                    <th>Payment status</th>
                    <th>Dispatch status</th>
                    <th>Order date</th>
                    <th>Products</th>
                    <th>Remove Order</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orders)
                {
                    <tr @onclick="(() => SetOrderForUpdates(order))">
                        <td>@order.Id</td>
                        <td>@order.CustomerId</td>
                        <td>@order.DeliveryAddress</td>
                        <td>@order.PaymentCompleted</td>
                        <td>@order.Dispatched</td>
                        <td>@order.OrderDate.</td>
                        <td><button class="btn btn-outline-info">Show products</button></td>
                        <td><button class="btn btn-danger" @onclick="(() => DeleteOrder(order))">Remove order</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <EditForm Model="@newOrder" OnValidSubmit="(() => AddOrder(newOrder))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="customer Id">Customer Id</label>
            <input @bind-value="@newOrder.CustomerId" type="text" />
        </div>
        <div class="form-group">
            <label for="delivery address">Delivery address</label>
            <input @bind-value="@newOrder.DeliveryAddress" type="text" />
        </div>
        <button class="btn btn-info" type="submit">Add order</button>
    </EditForm>

    <EditForm Model="@updatedOrder" OnValidSubmit="(() => UpdateOrder(updatedOrder))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <div class="form-group">
                <label for="customer Id">Customer Id</label>
                <input @bind-value="@newOrder.CustomerId" type="text" />
            </div>
            <div class="form-group">
                <label for="delivery address">Delivery address</label>
                <input @bind-value="@newOrder.DeliveryAddress" type="text" />
            </div>
            <div class="form-check">
                <label for="payment status">Payment completed</label>
                <input @bind-value="@newOrder.PaymentCompleted" type="checkbox">
            </div>
        </div>
        <button class="btn btn-info" type="submit">Update order</button>
    </EditForm>
</div>


@code
{
    List<Order> orders;

    protected override async Task OnInitializedAsync()
    {
        orders = await OrderRepository.GetAllAsync() as List<Order>;
    }

    Order newOrder = new Order();
    Order updatedOrder = new Order();

    private void AddOrder(Order order)
    {
        OrderRepository.AddAsync(order);
        newOrder = new Order();
    }

    private void SetOrderForUpdates(Order selected)
    {
        updatedOrder = selected;
    }

    private void UpdateOrder(Order order)
    {
        OrderRepository.UpdateAsync(order);
    }

    private void DeleteOrder(Order order)
    {
        OrderRepository.RemoveAsync(order);
    }
}



